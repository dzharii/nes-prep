{"version":3,"sources":["webpack:///./JsNes/JsNesIntegration.ts","webpack:///./JsNes/JsNes.tsx","webpack:///./routes/home/style.css","webpack:///./routes/home/index.tsx"],"names":["onAnimationFrame","window","requestAnimationFrame","image","data","set","framebuffer_u8","canvas_ctx","putImageData","audio_callback","event","dst","outputBuffer","len","length","audio_write_cursor","audio_read_cursor","SAMPLE_MASK","nes","frame","dst_l","getChannelData","dst_r","i","src_idx","audio_samples_L","audio_samples_R","keyboard","callback","keyCode","jsnes","Controller","BUTTON_UP","BUTTON_DOWN","BUTTON_LEFT","BUTTON_RIGHT","BUTTON_A","BUTTON_B","BUTTON_SELECT","BUTTON_START","nes_init","canvas_id","canvas","document","getElementById","Error","getContext","getImageData","fillStyle","fillRect","buffer","ArrayBuffer","Uint8ClampedArray","framebuffer_u32","Uint32Array","audio_ctx","AudioContext","script_processor","createScriptProcessor","onaudioprocess","connect","destination","nes_boot","rom_data","loadROM","SAMPLE_COUNT","Float32Array","NES","onFrame","framebuffer_24","SCREEN_WIDTH","onAudioSample","l","r","addEventListener","buttonDown","buttonUp","JsNes","Component","refMainCanvas","createRef","shouldComponentUpdate","componentDidMount","path","req","XMLHttpRequest","open","overrideMimeType","onerror","console","log","statusText","onload","this","status","responseText","send","nes_load_url","render","id","width","height","style","ref","Home","constructor","props","super","state","play","renderReadyButton","onClick","onReadyButtonClicked","bind","setState","renderNesCanvas","class"],"mappings":"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","file":"route-home.chunk.d34f2.esm.js","sourcesContent":["type JsNes = any;\ndeclare const jsnes: JsNes\ntype INesKeyCallback = (controller: any, button: any) => void\n\nconst SCREEN_WIDTH = 256;\nconst SCREEN_HEIGHT = 240;\nconst FRAMEBUFFER_SIZE = SCREEN_WIDTH * SCREEN_HEIGHT;\n\n\nlet canvas_ctx: CanvasRenderingContext2D;\nlet image:ImageData;\nlet  framebuffer_u8: Uint8ClampedArray;\nlet framebuffer_u32: Uint32Array;\n\nconst AUDIO_BUFFERING = 512;\nconst SAMPLE_COUNT = 4*1024;\nconst SAMPLE_MASK = SAMPLE_COUNT - 1;\nconst audio_samples_L = new Float32Array(SAMPLE_COUNT);\nconst audio_samples_R = new Float32Array(SAMPLE_COUNT);\nlet audio_write_cursor = 0;\nlet audio_read_cursor = 0;\n\nvar nes = new jsnes.NES({\n\tonFrame: function(framebuffer_24: number[]){\n\t\tfor(var i = 0; i < FRAMEBUFFER_SIZE; i++) framebuffer_u32[i] = 0xFF000000 | framebuffer_24[i];\n\t},\n\tonAudioSample: function(l: number, r: number){\n\t\taudio_samples_L[audio_write_cursor] = l;\n\t\taudio_samples_R[audio_write_cursor] = r;\n\t\taudio_write_cursor = (audio_write_cursor + 1) & SAMPLE_MASK;\n\t},\n});\n\nfunction onAnimationFrame(){\n\twindow.requestAnimationFrame(onAnimationFrame);\n\timage.data.set(framebuffer_u8);\n\tcanvas_ctx.putImageData(image, 0, 0);\n}\n\nfunction audio_remain(){\n\treturn (audio_write_cursor - audio_read_cursor) & SAMPLE_MASK;\n}\n\nfunction audio_callback(event: AudioProcessingEvent){\n\tvar dst = event.outputBuffer;\n\tvar len = dst.length;\n\n\t// Attempt to avoid buffer underruns.\n\tif(audio_remain() < AUDIO_BUFFERING) nes.frame();\n\n\tvar dst_l = dst.getChannelData(0);\n\tvar dst_r = dst.getChannelData(1);\n\tfor(var i = 0; i < len; i++){\n\t\tvar src_idx = (audio_read_cursor + i) & SAMPLE_MASK;\n\t\tdst_l[i] = audio_samples_L[src_idx];\n\t\tdst_r[i] = audio_samples_R[src_idx];\n\t}\n\n\taudio_read_cursor = (audio_read_cursor + len) & SAMPLE_MASK;\n}\n\nfunction keyboard(callback: INesKeyCallback, event: KeyboardEvent){\n    var player = 1;\n\tswitch(event.keyCode){\n\t\tcase 38: // UP\n\t\t\tcallback(player, jsnes.Controller.BUTTON_UP); break;\n\t\tcase 40: // Down\n\t\t\tcallback(player, jsnes.Controller.BUTTON_DOWN); break;\n\t\tcase 37: // Left\n\t\t\tcallback(player, jsnes.Controller.BUTTON_LEFT); break;\n\t\tcase 39: // Right\n\t\t\tcallback(player, jsnes.Controller.BUTTON_RIGHT); break;\n\t\tcase 65: // 'a' - qwerty, dvorak\n\t\tcase 81: // 'q' - azerty\n\t\t\tcallback(player, jsnes.Controller.BUTTON_A); break;\n\t\tcase 83: // 's' - qwerty, azerty\n\t\tcase 79: // 'o' - dvorak\n\t\t\tcallback(player, jsnes.Controller.BUTTON_B); break;\n\t\tcase 9: // Tab\n\t\t\tcallback(player, jsnes.Controller.BUTTON_SELECT); break;\n\t\tcase 13: // Return\n\t\t\tcallback(player, jsnes.Controller.BUTTON_START); break;\n\t\tdefault: break;\n\t}\n}\n\nexport function nes_init(canvas_id: string){\n\tconst canvas = document.getElementById(canvas_id) as HTMLCanvasElement;\n    if (!canvas) throw new Error('Main canvas element was not found');\n\n\tcanvas_ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n    if (!canvas_ctx) throw new Error('Unable to obtain 2d context from main canvas');\n\n\timage = canvas_ctx.getImageData(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);\n\n\tcanvas_ctx.fillStyle = \"black\";\n\tcanvas_ctx.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);\n\n\t// Allocate framebuffer array.\n\tvar buffer = new ArrayBuffer(image.data.length);\n\tframebuffer_u8 = new Uint8ClampedArray(buffer);\n\tframebuffer_u32 = new Uint32Array(buffer);\n\n    // Setup audio.\n\tvar audio_ctx = new window.AudioContext();\n\tvar script_processor = audio_ctx.createScriptProcessor(AUDIO_BUFFERING, 0, 2);\n\tscript_processor.onaudioprocess = audio_callback;\n\tscript_processor.connect(audio_ctx.destination);\n}\n\nexport function nes_boot(rom_data: string){\n\tnes.loadROM(rom_data);\n\twindow.requestAnimationFrame(onAnimationFrame);\n}\n\nfunction nes_load_data(canvas_id: string, rom_data: string){\n\tnes_init(canvas_id);\n\tnes_boot(rom_data);\n}\n\nexport function nes_load_url(canvas_id: string, path: string){\n\tnes_init(canvas_id);\n\n\tvar req = new XMLHttpRequest();\n\treq.open(\"GET\", path);\n\treq.overrideMimeType(\"text/plain; charset=x-user-defined\");\n\treq.onerror = () => console.log(`Error loading ${path}: ${req.statusText}`);\n\n\treq.onload = function() {\n\t\tif (this.status === 200) {\n\t\tnes_boot(this.responseText);\n\t\t} else if (this.status === 0) {\n\t\t\t// Aborted, so ignore error\n\t\t} else {\n\t\t\t(req as any).onerror();\n\t\t}\n\t};\n\n\treq.send();\n}\n\ndocument.addEventListener('keydown', (event) => {keyboard(nes.buttonDown, event)});\ndocument.addEventListener('keyup', (event) => {keyboard(nes.buttonUp, event)});","import { createRef } from \"preact\";\nimport { Component, Fragment, h } from \"preact\";\nimport { nes_boot, nes_init, nes_load_url } from \"./JsNesIntegration\";\n\ninterface IProps { }\ninterface IState { }\n\nexport class JsNes extends Component<IProps, IState> {\n    refMainCanvas  =  createRef<HTMLCanvasElement>()\n\n    shouldComponentUpdate() {\n        return false;\n    }\n\n    componentDidMount() {\n        // nes_load_url(\"nes-canvas\", \"/assets/SuperMarBros.nes\");\n        nes_load_url(\"nes-canvas\", \"/assets/InterglacticTransmissing.nes\");\n    }\n\n    render() {\n        return (\n        <Fragment>\n            <canvas id=\"nes-canvas\" width=\"256\" height=\"240\" style=\"width: 100%\" ref={this.refMainCanvas}/>\n        </Fragment>)\n    }\n\n}\n\n","// extracted by mini-css-extract-plugin\nexport default {\"home\":\"home__5d1wS\"};","import { Component, render, h } from 'preact';\nimport { JsNes } from '../../JsNes/JsNes';\nimport style from './style.css';\n\n\ninterface IProps {\n\n}\n\ninterface IState {\n    play: boolean\n}\n\nclass Home extends Component<IProps, IState> {\n    /**\n     *\n     */\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            play: false,\n        }\n    }\n    /**\n     * We need the visitor to perform interaction on the page,\n     * like pressing the button to properly initialize AudioContext\n     */\n    renderReadyButton() {\n        return (\n            <button onClick={ this.onReadyButtonClicked.bind(this) } >Ready, Player One!</button>\n        )\n    }\n\n    onReadyButtonClicked() {\n        this.setState({ play: true });\n    }\n\n    renderNesCanvas() {\n        return (\n            <div style=\"margin: auto; width: 75%; height: 250px; border: 1px solid black;\">\n                <JsNes />\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div class={style.home}>\n                { this.state.play ? this.renderNesCanvas() : this.renderReadyButton() }\n            </div>\n        );\n    }\n};\n\nexport default Home;\n"],"sourceRoot":""}